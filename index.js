require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const db = require('./db');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
const validators = {
  phone: (value) => {
    const phoneRegex = /^(\+?998)?\s*(\d{2})\s*(\d{3})\s*(\d{2})\s*(\d{2})$/;
    const cleanPhone = value.replace(/\s+/g, '');
    if (!phoneRegex.test(cleanPhone)) {
      return { isValid: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +998 94 205 25 25 –∏–ª–∏ 94 205 25 25' };
    }
    return { isValid: true, value: cleanPhone.startsWith('+') ? cleanPhone : `+998${cleanPhone}` };
  },
  name: (value) => {
    const nameRegex = /^[–ê-–Ø–∞-—èA-Za-z\s-]{2,50}$/;
    if (!nameRegex.test(value)) {
      return { isValid: false, message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å. –î–ª–∏–Ω–∞ –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.' };
    }
    return { isValid: true, value: value.trim() };
  },
  passport: (value) => {
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞: –æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    const passportRegex = /^[A-Za-z0-9]{5,15}$/;
    if (!passportRegex.test(value)) {
      return { isValid: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)' };
    }
    return { isValid: true, value: value.toUpperCase() };
  },
  date: (value) => {
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(value)) {
      return { isValid: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î' };
    }
    const date = new Date(value);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (isNaN(date.getTime())) {
      return { isValid: false, message: '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.' };
    }
    
    if (date < today) {
      return { isValid: false, message: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.' };
    }
    
    return { isValid: true, value };
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  const isAdmin = await db.isAdmin(chatId);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
  userStates.delete(chatId);
  
  if (isAdmin) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          ['üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
          ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
          ['üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤'],
          ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏']
        ],
        resize_keyboard: true
      }
    };
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
  } else {
    const keyboard = {
      reply_markup: {
        keyboard: [
          ['üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
          ['üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ']
        ],
        resize_keyboard: true
      }
    };
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const isAdmin = await db.isAdmin(chatId);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (msg.text === 'üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ') {
    userStates.set(chatId, { step: 'phone' });
    const keyboard = {
      reply_markup: {
        keyboard: [[{
          text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          request_contact: true
        }]],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', keyboard);
    return;
  } else if (msg.text === 'üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ') {
    try {
      const user = await db.getUserByTelegramId(chatId);
      
      if (!user) {
        bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∂–º–∏—Ç–µ "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.');
        return;
      }
      
      const message = `–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n` +
        `–ò–º—è: ${user.first_name}\n` +
        `–§–∞–º–∏–ª–∏—è: ${user.last_name}\n` +
        `–ü–∞—Å–ø–æ—Ä—Ç: ${user.passport_number}\n` +
        `–°—Ä–æ–∫ –≤–∏–∑—ã: ${formatDisplayDate(user.visa_expiry_date)}\n` +
        `–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${formatDisplayDate(user.created_at)}\n\n` +
        `–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ "üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"`;
      
      bot.sendMessage(chatId, message);
      return;
    } catch (error) {
      console.error('Error getting user data:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
  }
  
  if (isAdmin) {
    if (msg.text === 'üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ') {
      handleGetData(chatId);
      return;
    } else if (msg.text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ') {
      userStates.set(chatId, { step: 'admin_phone' });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      return;
    } else if (msg.text === 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤') {
      checkExpiringVisas(chatId);
      return;
    } else if (msg.text === 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏') {
      handleAdminManagement(chatId);
      return;
    } else if (msg.text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞') {
      userStates.set(chatId, { step: 'add_admin_id' });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
      return;
    } else if (msg.text === '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞') {
      userStates.set(chatId, { step: 'remove_admin_id' });
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
      return;
    } else if (msg.text === 'üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤') {
      handleListAdmins(chatId);
      return;
    } else if (msg.text === '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
      const keyboard = {
        reply_markup: {
          keyboard: [
            ['üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
            ['üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤'],
            ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏']
          ],
          resize_keyboard: true
        }
      };
      bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', keyboard);
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const state = userStates.get(chatId);
  if (!state) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (state.step === 'add_admin_id') {
    const adminId = parseInt(msg.text);
    if (isNaN(adminId)) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)');
      return;
    }
    
    userStates.set(chatId, { 
      step: 'add_admin_username',
      adminId: adminId
    });
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @):');
    return;
  }
  
  if (state.step === 'add_admin_username') {
    try {
      await db.addAdmin(state.adminId, msg.text, chatId);
      bot.sendMessage(chatId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${state.adminId}\nUsername: ${msg.text}`);
      userStates.delete(chatId);
      handleAdminManagement(chatId);
    } catch (error) {
      console.error('Error adding admin:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (state.step === 'remove_admin_id') {
    const adminId = parseInt(msg.text);
    if (isNaN(adminId)) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)');
      return;
    }
    
    try {
      const removedAdmin = await db.removeAdmin(adminId);
      if (removedAdmin) {
        bot.sendMessage(chatId, `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\nID: ${adminId}`);
      } else {
        bot.sendMessage(chatId, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }
      userStates.delete(chatId);
      handleAdminManagement(chatId);
    } catch (error) {
      console.error('Error removing admin:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  if (msg.contact && state.step === 'phone') {
    state.phone = msg.contact.phone_number;
    state.step = 'firstName';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
  if (isAdmin) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    switch (state.step) {
      case 'admin_phone':
        const adminPhoneValidation = validators.phone(msg.text);
        if (!adminPhoneValidation.isValid) {
          bot.sendMessage(chatId, adminPhoneValidation.message);
          return;
        }
        state.phone = adminPhoneValidation.value;
        state.step = 'admin_firstName';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        break;
      case 'admin_firstName':
        const adminFirstNameValidation = validators.name(msg.text);
        if (!adminFirstNameValidation.isValid) {
          bot.sendMessage(chatId, adminFirstNameValidation.message);
          return;
        }
        state.firstName = adminFirstNameValidation.value;
        state.step = 'admin_lastName';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        break;
      case 'admin_lastName':
        const adminLastNameValidation = validators.name(msg.text);
        if (!adminLastNameValidation.isValid) {
          bot.sendMessage(chatId, adminLastNameValidation.message);
          return;
        }
        state.lastName = adminLastNameValidation.value;
        state.step = 'admin_passport';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):');
        break;
      case 'admin_passport':
        const adminPassportValidation = validators.passport(msg.text);
        if (!adminPassportValidation.isValid) {
          bot.sendMessage(chatId, adminPassportValidation.message);
          return;
        }
        state.passportSeries = ''; // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä
        state.passportNumber = adminPassportValidation.value;
        state.step = 'admin_visaExpiry';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∏–∑—ã (–ì–ì–ì–ì-–ú–ú-–î–î):');
        break;
      case 'admin_visaExpiry':
        const adminDateValidation = validators.date(msg.text);
        if (!adminDateValidation.isValid) {
          bot.sendMessage(chatId, adminDateValidation.message);
          return;
        }
        try {
          const userData = {
            telegram_id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π telegram_id
            phone_number: state.phone,
            first_name: state.firstName,
            last_name: state.lastName,
            passport_series: state.passportSeries,
            passport_number: state.passportNumber,
            visa_expiry_date: adminDateValidation.value
          };
          
          await db.addUser(userData);
          userStates.delete(chatId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
          bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          const adminKeyboard = {
            reply_markup: {
              keyboard: [
                ['üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                ['üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤'],
                ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏']
              ],
              resize_keyboard: true
            }
          };
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', adminKeyboard);
        } catch (error) {
          console.error('Error adding user data:', error);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        break;
    }
  } else {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    switch (state.step) {
      case 'phone':
        const phoneValidation = validators.phone(msg.text);
        if (!phoneValidation.isValid) {
          bot.sendMessage(chatId, phoneValidation.message);
          return;
        }
        state.phone = phoneValidation.value;
        state.step = 'firstName';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');
        break;
      case 'firstName':
        const firstNameValidation = validators.name(msg.text);
        if (!firstNameValidation.isValid) {
          bot.sendMessage(chatId, firstNameValidation.message);
          return;
        }
        state.firstName = firstNameValidation.value;
        state.step = 'lastName';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:');
        break;
      case 'lastName':
        const lastNameValidation = validators.name(msg.text);
        if (!lastNameValidation.isValid) {
          bot.sendMessage(chatId, lastNameValidation.message);
          return;
        }
        state.lastName = lastNameValidation.value;
        state.step = 'passport';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (–æ—Ç 5 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):');
        break;
      case 'passport':
        const passportValidation = validators.passport(msg.text);
        if (!passportValidation.isValid) {
          bot.sendMessage(chatId, passportValidation.message);
          return;
        }
        state.passportSeries = ''; // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä
        state.passportNumber = passportValidation.value;
        state.step = 'visaExpiry';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∏–∑—ã (–ì–ì–ì–ì-–ú–ú-–î–î):');
        break;
      case 'visaExpiry':
        const dateValidation = validators.date(msg.text);
        if (!dateValidation.isValid) {
          bot.sendMessage(chatId, dateValidation.message);
          return;
        }
        try {
          const userData = {
            telegram_id: chatId,
            phone_number: state.phone,
            first_name: state.firstName,
            last_name: state.lastName,
            passport_series: state.passportSeries,
            passport_number: state.passportNumber,
            visa_expiry_date: dateValidation.value
          };
          
          await db.addUser(userData);
          userStates.delete(chatId);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
          bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
          const keyboard = {
            reply_markup: {
              keyboard: [
                ['üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
                ['üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ']
              ],
              resize_keyboard: true
            }
          };
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
        } catch (error) {
          console.error('Error saving user data:', error);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        break;
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function handleGetData(chatId) {
  try {
    const users = await db.getAllUsers();
    
    if (users.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º
    const groupedByWeek = groupVisasByWeek(users);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–¥–µ–ª—è–º–∏ –∏ –æ–ø—Ü–∏–µ–π "–í—Å–µ –¥–∞–Ω–Ω—ã–µ"
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ', callback_data: 'all_data' }],
          ...Object.keys(groupedByWeek).map(week => [{
            text: week,
            callback_data: `week_${week}`
          }])
        ]
      }
    };
    
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–∑ –∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ:', keyboard);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
    userStates.set(chatId, { 
      step: 'view_weeks',
      visaData: groupedByWeek,
      allData: users
    });
  } catch (error) {
    console.error('Error getting user data:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤–∏–∑ –ø–æ –Ω–µ–¥–µ–ª—è–º
function groupVisasByWeek(users) {
  const grouped = {};
  
  users.forEach(user => {
    const expiryDate = new Date(user.visa_expiry_date);
    const weekStart = getWeekStart(expiryDate);
    const weekEnd = getWeekEnd(expiryDate);
    const weekKey = `${formatDate(weekStart)} - ${formatDate(weekEnd)}`;
    
    if (!grouped[weekKey]) {
      grouped[weekKey] = [];
    }
    
    grouped[weekKey].push(user);
  });
  
  return grouped;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
function getWeekStart(date) {
  const d = new Date(date);
  const day = d.getDay();
  const diff = d.getDate() - day + (day === 0 ? -6 : 1);
  return new Date(d.setDate(diff));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏
function getWeekEnd(date) {
  const d = new Date(date);
  const day = d.getDay();
  const diff = d.getDate() - day + (day === 0 ? 0 : 7);
  return new Date(d.setDate(diff));
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
  const d = new Date(date);
  return `${d.getDate()}.${d.getMonth() + 1}.${d.getFullYear()}`;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatDisplayDate(date) {
  const d = new Date(date);
  const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
  return `${d.getDate()} ${months[d.getMonth()]} ${d.getFullYear()}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data === 'all_data') {
    const userState = userStates.get(chatId);
    
    if (userState && userState.allData) {
      const users = userState.allData;
      
      if (users.length === 0) {
        bot.sendMessage(chatId, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return;
      }
      

      
      const message = `üë•–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n` +
        users.map(user => 
          `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n` +
          `–ò–º—è: ${user.first_name}\n` +
          `–§–∞–º–∏–ª–∏—è: ${user.last_name}\n` +
          `–ü–∞—Å–ø–æ—Ä—Ç: ${user.passport_number}\n` +
          `–°—Ä–æ–∫ –≤–∏–∑—ã: ${formatDisplayDate(user.visa_expiry_date)}\n` +
          `–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${formatDisplayDate(user.created_at)}\n`
        ).join('\n');
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.');
    }
  } else if (data.startsWith('week_')) {
    const weekKey = data.replace('week_', '');
    const userState = userStates.get(chatId);
    
    if (userState && userState.visaData && userState.visaData[weekKey]) {
      const users = userState.visaData[weekKey];
      
      if (users.length === 0) {
        bot.sendMessage(chatId, `–ù–∞ –Ω–µ–¥–µ–ª—é ${weekKey} –Ω–µ—Ç –≤–∏–∑, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç.`);
        return;
      }
      
      const message = `–í–∏–∑—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª–µ ${weekKey}:\n\n` +
        users.map(user => 
          `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n` +
          `–ò–º—è: ${user.first_name}\n` +
          `–§–∞–º–∏–ª–∏—è: ${user.last_name}\n` +
          `–ü–∞—Å–ø–æ—Ä—Ç: ${user.passport_number}\n` +
          `–°—Ä–æ–∫ –≤–∏–∑—ã: ${formatDisplayDate(user.visa_expiry_date)}\n`
        ).join('\n');
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.');
    }
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
  bot.answerCallbackQuery(query.id);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –≤–∏–∑ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
cron.schedule('0 9 * * *', async () => {
  try {
    const expiringVisas = await db.getExpiringVisas(3); // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 3 –¥–Ω—è
    
    if (expiringVisas.length > 0) {
      const message = expiringVisas.map(user => 
        `‚åõÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ò—Å—Ç–µ–∫–∞–µ—Ç –≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n` +
        `–ò–º—è: ${user.first_name}\n` +
        `–§–∞–º–∏–ª–∏—è: ${user.last_name}\n` +
        `–ü–∞—Å–ø–æ—Ä—Ç: ${user.passport_number}\n` +
        `–ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDisplayDate(user.visa_expiry_date)}`
      ).join('\n\n');
      
      bot.sendMessage(process.env.ADMIN_CHAT_ID, message);
    }
  } catch (error) {
    console.error('Error checking visa expiration:', error);
  }
}, {
  timezone: 'Asia/Tashkent'
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ –≤–∏–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
async function checkExpiringVisas(chatId) {
  try {
    const expiringVisas = await db.getExpiringVisas(7);
    
    if (expiringVisas.length === 0) {
      bot.sendMessage(chatId, '–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç –≤–∏–∑, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç.');
      return;
    }
    
    const message = `üì® –í–∏–∑—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:\n\n` +
      expiringVisas.map(user => 
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone_number}\n` +
        `–ò–º—è: ${user.first_name}\n` +
        `–§–∞–º–∏–ª–∏—è: ${user.last_name}\n` +
        `–ü–∞—Å–ø–æ—Ä—Ç: ${user.passport_number}\n` +
        `–ò—Å—Ç–µ–∫–∞–µ—Ç: ${formatDisplayDate(user.visa_expiry_date)}\n`
      ).join('\n');
    
    bot.sendMessage(chatId, message);
  } catch (error) {
    console.error('Error checking expiring visas:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–æ–∫–æ–≤ –≤–∏–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
async function handleAdminManagement(chatId) {
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
        ['‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
        ['üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤'],
        ['‚óÄÔ∏è –ù–∞–∑–∞–¥']
      ],
      resize_keyboard: true
    }
  };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async function handleListAdmins(chatId) {
  try {
    const admins = await db.getAllAdmins();
    if (admins.length === 0) {
      bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.');
      return;
    }
    
    const message = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n' +
      admins.map(admin => 
        `ID: ${admin.telegram_id}\n` +
        `Username: ${admin.username}\n` +
        `–î–æ–±–∞–≤–ª–µ–Ω: ${formatDisplayDate(admin.added_at)}\n`
      ).join('\n');
    
    bot.sendMessage(chatId, message);
  } catch (error) {
    console.error('Error listing admins:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
db.initDatabase().catch(console.error);

console.log('Bot started');